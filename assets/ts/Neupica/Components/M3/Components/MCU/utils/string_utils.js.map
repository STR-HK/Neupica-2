{"version":3,"file":"string_utils.js","sourceRoot":"","sources":["../../utils/string_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as colorUtils from './color_utils';\r\n\r\n/**\r\n * Utility methods for hexadecimal representations of colors.\r\n */\r\n\r\n/**\r\n * @param argb ARGB representation of a color.\r\n * @return Hex string representing color, ex. #ff0000 for red.\r\n */\r\nexport const hexFromArgb = (argb: number) => {\r\n  const r = colorUtils.redFromArgb(argb);\r\n  const g = colorUtils.greenFromArgb(argb);\r\n  const b = colorUtils.blueFromArgb(argb);\r\n  const outParts = [r.toString(16), g.toString(16), b.toString(16)];\r\n\r\n  // Pad single-digit output values\r\n  for (const [i, part] of outParts.entries()) {\r\n    if (part.length === 1) {\r\n      outParts[i] = '0' + part;\r\n    }\r\n  }\r\n\r\n  return '#' + outParts.join('');\r\n};\r\n\r\n/**\r\n * @param hex String representing color as hex code. Accepts strings with or\r\n *     without leading #, and string representing the color using 3, 6, or 8\r\n *     hex characters.\r\n * @return ARGB representation of color.\r\n */\r\nexport const argbFromHex = (hex: string) => {\r\n  hex = hex.replace('#', '');\r\n  const isThree = hex.length === 3;\r\n  const isSix = hex.length === 6;\r\n  const isEight = hex.length === 8;\r\n  if (!isThree && !isSix && !isEight) {\r\n    throw new Error('unexpected hex ' + hex);\r\n  }\r\n  let r = 0;\r\n  let g = 0;\r\n  let b = 0;\r\n  if (isThree) {\r\n    r = parseIntHex(hex.slice(0, 1).repeat(2));\r\n    g = parseIntHex(hex.slice(1, 2).repeat(2));\r\n    b = parseIntHex(hex.slice(2, 3).repeat(2));\r\n  } else if (isSix) {\r\n    r = parseIntHex(hex.slice(0, 2));\r\n    g = parseIntHex(hex.slice(2, 4));\r\n    b = parseIntHex(hex.slice(4, 6));\r\n  } else if (isEight) {\r\n    r = parseIntHex(hex.slice(2, 4));\r\n    g = parseIntHex(hex.slice(4, 6));\r\n    b = parseIntHex(hex.slice(6, 8));\r\n  }\r\n\r\n  return (\r\n      ((255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) | (b & 0x0ff)) >>>\r\n      0);\r\n};\r\n\r\nfunction parseIntHex(value: string) {\r\n  // tslint:disable-next-line:ban\r\n  return parseInt(value, 16);\r\n}\r\n"]}