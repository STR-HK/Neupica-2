{"version":3,"file":"test_utils.js","sourceRoot":"","sources":["../../utils/test_utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,SAAS,CAAC;AAEjB,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAU3C;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,MAAM,cAAc,GAAmC;IAC5D,YAAY,CACR,IAA0B,EAC1B,qBAA8D;QAChE,OAAO;YACL,OAAO,CAAC,MAAc,EAAE,QAAgB;gBACtC,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAC3C,OAAO;oBACL,IAAI;oBACJ,OAAO,EAAE,kBAAkB,WAAW,CAAC,MAAM,CAAC,OAC1C,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,WAAW,CAAC,QAAQ,CAAC,EAAE;iBACxD,CAAC;YACJ,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport 'jasmine';\r\n\r\nimport {hexFromArgb} from './string_utils';\r\n\r\ndeclare global {\r\n  namespace jasmine {\r\n    interface Matchers<T> {\r\n      matchesColor(expected: number): boolean;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Exports a matcher called `matchesColor` that takes two numbers, and logs\r\n * the equivalent hex codes on failure.\r\n *\r\n * To use, add to your test file:\r\n *  beforeEach(() => {\r\n *    jasmine.addMatchers(customMatchers);\r\n *  });\r\n *\r\n * Then it can be used as a standard matcher:\r\n *  expect(scheme.onSurface).matchesColor(0xff000000);\r\n */\r\nexport const customMatchers: jasmine.CustomMatcherFactories = {\r\n  matchesColor(\r\n      util: jasmine.MatchersUtil,\r\n      customEqualityTesters: readonly jasmine.CustomEqualityTester[]) {\r\n    return {\r\n      compare(actual: number, expected: number) {\r\n        const pass = util.equals(actual, expected);\r\n        return {\r\n          pass,\r\n          message: `Expected color ${hexFromArgb(actual)} to ${\r\n              pass ? 'NOT' : ''} match: ${hexFromArgb(expected)}`,\r\n        };\r\n      },\r\n    };\r\n  },\r\n};\r\n"]}