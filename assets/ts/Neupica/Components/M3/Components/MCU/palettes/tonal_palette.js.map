{"version":3,"file":"tonal_palette.js","sourceRoot":"","sources":["../../palettes/tonal_palette.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,GAAG,EAAC,MAAM,YAAY,CAAC;AAE/B;;;GAGG;AACH,MAAM,OAAO,YAAY;IAqBvB,YACqB,GAAW,EAAmB,MAAc;QAA5C,QAAG,GAAH,GAAG,CAAQ;QAAmB,WAAM,GAAN,MAAM,CAAQ;QArBhD,UAAK,GAAG,IAAI,GAAG,EAAkB,CAAC;IAqBiB,CAAC;IAnBrE;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,OAAO,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,gBAAgB,CAAC,GAAW,EAAE,MAAc;QACjD,OAAO,IAAI,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAKD;;;OAGG;IACH,IAAI,CAAC,IAAY;QACf,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;YACrD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAC5B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {Hct} from '../hct/hct';\r\n\r\n/**\r\n *  A convenience class for retrieving colors that are constant in hue and\r\n *  chroma, but vary in tone.\r\n */\r\nexport class TonalPalette {\r\n  private readonly cache = new Map<number, number>();\r\n\r\n  /**\r\n   * @param argb ARGB representation of a color\r\n   * @return Tones matching that color's hue and chroma.\r\n   */\r\n  static fromInt(argb: number): TonalPalette {\r\n    const hct = Hct.fromInt(argb);\r\n    return TonalPalette.fromHueAndChroma(hct.hue, hct.chroma);\r\n  }\r\n\r\n  /**\r\n   * @param hue HCT hue\r\n   * @param chroma HCT chroma\r\n   * @return Tones matching hue and chroma.\r\n   */\r\n  static fromHueAndChroma(hue: number, chroma: number): TonalPalette {\r\n    return new TonalPalette(hue, chroma);\r\n  }\r\n\r\n  private constructor(\r\n      private readonly hue: number, private readonly chroma: number) {}\r\n\r\n  /**\r\n   * @param tone HCT tone, measured from 0 to 100.\r\n   * @return ARGB representation of a color with that tone.\r\n   */\r\n  tone(tone: number): number {\r\n    let argb = this.cache.get(tone);\r\n    if (argb === undefined) {\r\n      argb = Hct.from(this.hue, this.chroma, tone).toInt();\r\n      this.cache.set(tone, argb);\r\n    }\r\n    return argb;\r\n  }\r\n}\r\n"]}