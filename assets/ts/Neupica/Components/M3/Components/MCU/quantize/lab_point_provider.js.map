{"version":3,"file":"lab_point_provider.js","sourceRoot":"","sources":["../../quantize/lab_point_provider.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,kBAAkB,CAAC;AAE1B,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAE9C;;;GAGG;AACH,MAAM,OAAO,gBAAgB;IAC3B;;;OAGG;IACH,OAAO,CAAC,IAAY;QAClB,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAe;QACnB,OAAO,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;OAOG;IACH,QAAQ,CAAC,IAAc,EAAE,EAAY;QACnC,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3B,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACrC,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport './point_provider';\r\n\r\nimport * as utils from '../utils/color_utils';\r\n\r\n/**\r\n * Provides conversions needed for K-Means quantization. Converting input to\r\n * points, and converting the final state of the K-Means algorithm to colors.\r\n */\r\nexport class LabPointProvider implements PointProvider {\r\n  /**\r\n   * Convert a color represented in ARGB to a 3-element array of L*a*b*\r\n   * coordinates of the color.\r\n   */\r\n  fromInt(argb: number): number[] {\r\n    return utils.labFromArgb(argb);\r\n  }\r\n\r\n  /**\r\n   * Convert a 3-element array to a color represented in ARGB.\r\n   */\r\n  toInt(point: number[]): number {\r\n    return utils.argbFromLab(point[0], point[1], point[2]);\r\n  }\r\n\r\n  /**\r\n   * Standard CIE 1976 delta E formula also takes the square root, unneeded\r\n   * here. This method is used by quantization algorithms to compare distance,\r\n   * and the relative ordering is the same, with or without a square root.\r\n   *\r\n   * This relatively minor optimization is helpful because this method is\r\n   * called at least once for each pixel in an image.\r\n   */\r\n  distance(from: number[], to: number[]): number {\r\n    const dL = from[0] - to[0];\r\n    const dA = from[1] - to[1];\r\n    const dB = from[2] - to[2];\r\n    return dL * dL + dA * dA + dB * dB;\r\n  }\r\n}\r\n"]}