{"version":3,"file":"quantizer_map.js","sourceRoot":"","sources":["../../quantize/quantizer_map.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAE9C;;;GAGG;AACH,uEAAuE;AACvE,4EAA4E;AAC5E,yCAAyC;AACzC,EAAE;AACF,8CAA8C;AAC9C,MAAM,OAAO,YAAY;IACvB;;;;OAIG;IACH,MAAM,CAAC,QAAQ,CAAC,MAAgB;;QAC9B,MAAM,YAAY,GAAG,IAAI,GAAG,EAAkB,CAAC;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACzC,IAAI,KAAK,GAAG,GAAG,EAAE;gBACf,SAAS;aACV;YACD,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,MAAA,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,mCAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC7D;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as utils from '../utils/color_utils';\r\n\r\n/**\r\n * Quantizes an image into a map, with keys of ARGB colors, and values of the\r\n * number of times that color appears in the image.\r\n */\r\n// material_color_utilities is designed to have a consistent API across\r\n// platforms and modular components that can be moved around easily. Using a\r\n// class as a namespace facilitates this.\r\n//\r\n// tslint:disable-next-line:class-as-namespace\r\nexport class QuantizerMap {\r\n  /**\r\n   * @param pixels Colors in ARGB format.\r\n   * @return A Map with keys of ARGB colors, and values of the number of times\r\n   *     the color appears in the image.\r\n   */\r\n  static quantize(pixels: number[]): Map<number, number> {\r\n    const countByColor = new Map<number, number>();\r\n    for (let i = 0; i < pixels.length; i++) {\r\n      const pixel = pixels[i];\r\n      const alpha = utils.alphaFromArgb(pixel);\r\n      if (alpha < 255) {\r\n        continue;\r\n      }\r\n      countByColor.set(pixel, (countByColor.get(pixel) ?? 0) + 1);\r\n    }\r\n    return countByColor;\r\n  }\r\n}\r\n"]}