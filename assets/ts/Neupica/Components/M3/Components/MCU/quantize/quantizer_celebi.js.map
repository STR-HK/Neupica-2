{"version":3,"file":"quantizer_celebi.js","sourceRoot":"","sources":["../../quantize/quantizer_celebi.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAC,gBAAgB,EAAC,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAE3C;;;;;;;;;;GAUG;AACH,uEAAuE;AACvE,4EAA4E;AAC5E,yCAAyC;AACzC,EAAE;AACF,8CAA8C;AAC9C,MAAM,OAAO,eAAe;IAC1B;;;;;;;OAOG;IACH,MAAM,CAAC,QAAQ,CAAC,MAAgB,EAAE,SAAiB;QACjD,MAAM,EAAE,GAAG,IAAI,WAAW,EAAE,CAAC;QAC7B,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAChD,OAAO,gBAAgB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport {QuantizerWsmeans} from './quantizer_wsmeans';\r\nimport {QuantizerWu} from './quantizer_wu';\r\n\r\n/**\r\n * An image quantizer that improves on the quality of a standard K-Means\r\n * algorithm by setting the K-Means initial state to the output of a Wu\r\n * quantizer, instead of random centroids. Improves on speed by several\r\n * optimizations, as implemented in Wsmeans, or Weighted Square Means, K-Means\r\n * with those optimizations.\r\n *\r\n * This algorithm was designed by M. Emre Celebi, and was found in their 2011\r\n * paper, Improving the Performance of K-Means for Color Quantization.\r\n * https://arxiv.org/abs/1101.0395\r\n */\r\n// material_color_utilities is designed to have a consistent API across\r\n// platforms and modular components that can be moved around easily. Using a\r\n// class as a namespace facilitates this.\r\n//\r\n// tslint:disable-next-line:class-as-namespace\r\nexport class QuantizerCelebi {\r\n  /**\r\n   * @param pixels Colors in ARGB format.\r\n   * @param maxColors The number of colors to divide the image into. A lower\r\n   *     number of colors may be returned.\r\n   * @return Map with keys of colors in ARGB format, and values of number of\r\n   *     pixels in the original image that correspond to the color in the\r\n   *     quantized image.\r\n   */\r\n  static quantize(pixels: number[], maxColors: number): Map<number, number> {\r\n    const wu = new QuantizerWu();\r\n    const wuResult = wu.quantize(pixels, maxColors);\r\n    return QuantizerWsmeans.quantize(pixels, wuResult, maxColors);\r\n  }\r\n}\r\n"]}