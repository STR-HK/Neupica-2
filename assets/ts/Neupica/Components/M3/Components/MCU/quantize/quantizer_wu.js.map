{"version":3,"file":"quantizer_wu.js","sourceRoot":"","sources":["../../quantize/quantizer_wu.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as utils from '../utils/color_utils';\r\n\r\nimport {QuantizerMap} from './quantizer_map';\r\n\r\nconst INDEX_BITS = 5;\r\nconst SIDE_LENGTH = 33;    // ((1 << INDEX_INDEX_BITS) + 1)\r\nconst TOTAL_SIZE = 35937;  // SIDE_LENGTH * SIDE_LENGTH * SIDE_LENGTH\r\n\r\nconst directions = {\r\n  RED: 'red',\r\n  GREEN: 'green',\r\n  BLUE: 'blue',\r\n};\r\n\r\n/**\r\n * An image quantizer that divides the image's pixels into clusters by\r\n * recursively cutting an RGB cube, based on the weight of pixels in each area\r\n * of the cube.\r\n *\r\n * The algorithm was described by Xiaolin Wu in Graphic Gems II, published in\r\n * 1991.\r\n */\r\nexport class QuantizerWu {\r\n  constructor(\r\n      private weights: number[] = [], private momentsR: number[] = [],\r\n      private momentsG: number[] = [], private momentsB: number[] = [],\r\n      private moments: number[] = [], private cubes: Box[] = []) {}\r\n\r\n  /**\r\n   * @param pixels Colors in ARGB format.\r\n   * @param maxColors The number of colors to divide the image into. A lower\r\n   *     number of colors may be returned.\r\n   * @return Colors in ARGB format.\r\n   */\r\n  quantize(pixels: number[], maxColors: number): number[] {\r\n    this.constructHistogram(pixels);\r\n    this.computeMoments();\r\n    const createBoxesResult = this.createBoxes(maxColors);\r\n    const results = this.createResult(createBoxesResult.resultCount);\r\n    return results;\r\n  }\r\n\r\n  private constructHistogram(pixels: number[]) {\r\n    this.weights = Array.from<number>({length: TOTAL_SIZE}).fill(0);\r\n    this.momentsR = Array.from<number>({length: TOTAL_SIZE}).fill(0);\r\n    this.momentsG = Array.from<number>({length: TOTAL_SIZE}).fill(0);\r\n    this.momentsB = Array.from<number>({length: TOTAL_SIZE}).fill(0);\r\n    this.moments = Array.from<number>({length: TOTAL_SIZE}).fill(0);\r\n\r\n    const countByColor = QuantizerMap.quantize(pixels);\r\n\r\n    for (const [pixel, count] of countByColor.entries()) {\r\n      const red = utils.redFromArgb(pixel);\r\n      const green = utils.greenFromArgb(pixel);\r\n      const blue = utils.blueFromArgb(pixel);\r\n\r\n      const bitsToRemove = 8 - INDEX_BITS;\r\n      const iR = (red >> bitsToRemove) + 1;\r\n      const iG = (green >> bitsToRemove) + 1;\r\n      const iB = (blue >> bitsToRemove) + 1;\r\n      const index = this.getIndex(iR, iG, iB);\r\n\r\n      this.weights[index] = (this.weights[index] ?? 0) + count;\r\n      this.momentsR[index] += count * red;\r\n      this.momentsG[index] += count * green;\r\n      this.momentsB[index] += count * blue;\r\n      this.moments[index] += count * (red * red + green * green + blue * blue);\r\n    }\r\n  }\r\n\r\n  private computeMoments() {\r\n    for (let r = 1; r < SIDE_LENGTH; r++) {\r\n      const area = Array.from<number>({length: SIDE_LENGTH}).fill(0);\r\n      const areaR = Array.from<number>({length: SIDE_LENGTH}).fill(0);\r\n      const areaG = Array.from<number>({length: SIDE_LENGTH}).fill(0);\r\n      const areaB = Array.from<number>({length: SIDE_LENGTH}).fill(0);\r\n      const area2 = Array.from<number>({length: SIDE_LENGTH}).fill(0.0);\r\n      for (let g = 1; g < SIDE_LENGTH; g++) {\r\n        let line = 0;\r\n        let lineR = 0;\r\n        let lineG = 0;\r\n        let lineB = 0;\r\n        let line2 = 0.0;\r\n        for (let b = 1; b < SIDE_LENGTH; b++) {\r\n          const index = this.getIndex(r, g, b);\r\n          line += this.weights[index];\r\n          lineR += this.momentsR[index];\r\n          lineG += this.momentsG[index];\r\n          lineB += this.momentsB[index];\r\n          line2 += this.moments[index];\r\n\r\n          area[b] += line;\r\n          areaR[b] += lineR;\r\n          areaG[b] += lineG;\r\n          areaB[b] += lineB;\r\n          area2[b] += line2;\r\n\r\n          const previousIndex = this.getIndex(r - 1, g, b);\r\n          this.weights[index] = this.weights[previousIndex] + area[b];\r\n          this.momentsR[index] = this.momentsR[previousIndex] + areaR[b];\r\n          this.momentsG[index] = this.momentsG[previousIndex] + areaG[b];\r\n          this.momentsB[index] = this.momentsB[previousIndex] + areaB[b];\r\n          this.moments[index] = this.moments[previousIndex] + area2[b];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private createBoxes(maxColors: number): CreateBoxesResult {\r\n    this.cubes =\r\n        Array.from<number>({length: maxColors}).fill(0).map(() => new Box());\r\n    const volumeVariance = Array.from<number>({length: maxColors}).fill(0.0);\r\n    this.cubes[0].r0 = 0;\r\n    this.cubes[0].g0 = 0;\r\n    this.cubes[0].b0 = 0;\r\n\r\n    this.cubes[0].r1 = SIDE_LENGTH - 1;\r\n    this.cubes[0].g1 = SIDE_LENGTH - 1;\r\n    this.cubes[0].b1 = SIDE_LENGTH - 1;\r\n\r\n    let generatedColorCount = maxColors;\r\n    let next = 0;\r\n    for (let i = 1; i < maxColors; i++) {\r\n      if (this.cut(this.cubes[next], this.cubes[i])) {\r\n        volumeVariance[next] =\r\n            this.cubes[next].vol > 1 ? this.variance(this.cubes[next]) : 0.0;\r\n        volumeVariance[i] =\r\n            this.cubes[i].vol > 1 ? this.variance(this.cubes[i]) : 0.0;\r\n      } else {\r\n        volumeVariance[next] = 0.0;\r\n        i--;\r\n      }\r\n\r\n      next = 0;\r\n      let temp = volumeVariance[0];\r\n      for (let j = 1; j <= i; j++) {\r\n        if (volumeVariance[j] > temp) {\r\n          temp = volumeVariance[j];\r\n          next = j;\r\n        }\r\n      }\r\n      if (temp <= 0.0) {\r\n        generatedColorCount = i + 1;\r\n        break;\r\n      }\r\n    }\r\n    return new CreateBoxesResult(maxColors, generatedColorCount);\r\n  }\r\n\r\n  private createResult(colorCount: number): number[] {\r\n    const colors: number[] = [];\r\n    for (let i = 0; i < colorCount; ++i) {\r\n      const cube = this.cubes[i];\r\n      const weight = this.volume(cube, this.weights);\r\n      if (weight > 0) {\r\n        const r = Math.round(this.volume(cube, this.momentsR) / weight);\r\n        const g = Math.round(this.volume(cube, this.momentsG) / weight);\r\n        const b = Math.round(this.volume(cube, this.momentsB) / weight);\r\n        const color = (255 << 24) | ((r & 0x0ff) << 16) | ((g & 0x0ff) << 8) |\r\n            (b & 0x0ff);\r\n        colors.push(color);\r\n      }\r\n    }\r\n    return colors;\r\n  }\r\n\r\n  private variance(cube: Box) {\r\n    const dr = this.volume(cube, this.momentsR);\r\n    const dg = this.volume(cube, this.momentsG);\r\n    const db = this.volume(cube, this.momentsB);\r\n    const xx = this.moments[this.getIndex(cube.r1, cube.g1, cube.b1)] -\r\n        this.moments[this.getIndex(cube.r1, cube.g1, cube.b0)] -\r\n        this.moments[this.getIndex(cube.r1, cube.g0, cube.b1)] +\r\n        this.moments[this.getIndex(cube.r1, cube.g0, cube.b0)] -\r\n        this.moments[this.getIndex(cube.r0, cube.g1, cube.b1)] +\r\n        this.moments[this.getIndex(cube.r0, cube.g1, cube.b0)] +\r\n        this.moments[this.getIndex(cube.r0, cube.g0, cube.b1)] -\r\n        this.moments[this.getIndex(cube.r0, cube.g0, cube.b0)];\r\n    const hypotenuse = dr * dr + dg * dg + db * db;\r\n    const volume = this.volume(cube, this.weights);\r\n    return xx - hypotenuse / volume;\r\n  }\r\n\r\n  private cut(one: Box, two: Box) {\r\n    const wholeR = this.volume(one, this.momentsR);\r\n    const wholeG = this.volume(one, this.momentsG);\r\n    const wholeB = this.volume(one, this.momentsB);\r\n    const wholeW = this.volume(one, this.weights);\r\n\r\n    const maxRResult = this.maximize(\r\n        one, directions.RED, one.r0 + 1, one.r1, wholeR, wholeG, wholeB,\r\n        wholeW);\r\n    const maxGResult = this.maximize(\r\n        one, directions.GREEN, one.g0 + 1, one.g1, wholeR, wholeG, wholeB,\r\n        wholeW);\r\n    const maxBResult = this.maximize(\r\n        one, directions.BLUE, one.b0 + 1, one.b1, wholeR, wholeG, wholeB,\r\n        wholeW);\r\n\r\n    let direction;\r\n    const maxR = maxRResult.maximum;\r\n    const maxG = maxGResult.maximum;\r\n    const maxB = maxBResult.maximum;\r\n    if (maxR >= maxG && maxR >= maxB) {\r\n      if (maxRResult.cutLocation < 0) {\r\n        return false;\r\n      }\r\n      direction = directions.RED;\r\n    } else if (maxG >= maxR && maxG >= maxB) {\r\n      direction = directions.GREEN;\r\n    } else {\r\n      direction = directions.BLUE;\r\n    }\r\n\r\n    two.r1 = one.r1;\r\n    two.g1 = one.g1;\r\n    two.b1 = one.b1;\r\n\r\n    switch (direction) {\r\n      case directions.RED:\r\n        one.r1 = maxRResult.cutLocation;\r\n        two.r0 = one.r1;\r\n        two.g0 = one.g0;\r\n        two.b0 = one.b0;\r\n        break;\r\n      case directions.GREEN:\r\n        one.g1 = maxGResult.cutLocation;\r\n        two.r0 = one.r0;\r\n        two.g0 = one.g1;\r\n        two.b0 = one.b0;\r\n        break;\r\n      case directions.BLUE:\r\n        one.b1 = maxBResult.cutLocation;\r\n        two.r0 = one.r0;\r\n        two.g0 = one.g0;\r\n        two.b0 = one.b1;\r\n        break;\r\n      default:\r\n        throw new Error('unexpected direction ' + direction);\r\n    }\r\n\r\n    one.vol = (one.r1 - one.r0) * (one.g1 - one.g0) * (one.b1 - one.b0);\r\n    two.vol = (two.r1 - two.r0) * (two.g1 - two.g0) * (two.b1 - two.b0);\r\n    return true;\r\n  }\r\n\r\n  private maximize(\r\n      cube: Box, direction: string, first: number, last: number, wholeR: number,\r\n      wholeG: number, wholeB: number, wholeW: number) {\r\n    const bottomR = this.bottom(cube, direction, this.momentsR);\r\n    const bottomG = this.bottom(cube, direction, this.momentsG);\r\n    const bottomB = this.bottom(cube, direction, this.momentsB);\r\n    const bottomW = this.bottom(cube, direction, this.weights);\r\n\r\n    let max = 0.0;\r\n    let cut = -1;\r\n\r\n    let halfR = 0;\r\n    let halfG = 0;\r\n    let halfB = 0;\r\n    let halfW = 0;\r\n    for (let i = first; i < last; i++) {\r\n      halfR = bottomR + this.top(cube, direction, i, this.momentsR);\r\n      halfG = bottomG + this.top(cube, direction, i, this.momentsG);\r\n      halfB = bottomB + this.top(cube, direction, i, this.momentsB);\r\n      halfW = bottomW + this.top(cube, direction, i, this.weights);\r\n      if (halfW === 0) {\r\n        continue;\r\n      }\r\n\r\n      let tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\r\n      let tempDenominator = halfW * 1.0;\r\n      let temp = tempNumerator / tempDenominator;\r\n\r\n      halfR = wholeR - halfR;\r\n      halfG = wholeG - halfG;\r\n      halfB = wholeB - halfB;\r\n      halfW = wholeW - halfW;\r\n      if (halfW === 0) {\r\n        continue;\r\n      }\r\n\r\n      tempNumerator = (halfR * halfR + halfG * halfG + halfB * halfB) * 1.0;\r\n      tempDenominator = halfW * 1.0;\r\n      temp += tempNumerator / tempDenominator;\r\n\r\n      if (temp > max) {\r\n        max = temp;\r\n        cut = i;\r\n      }\r\n    }\r\n    return new MaximizeResult(cut, max);\r\n  }\r\n\r\n  private volume(cube: Box, moment: number[]) {\r\n    return (\r\n        moment[this.getIndex(cube.r1, cube.g1, cube.b1)] -\r\n        moment[this.getIndex(cube.r1, cube.g1, cube.b0)] -\r\n        moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\r\n        moment[this.getIndex(cube.r1, cube.g0, cube.b0)] -\r\n        moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\r\n        moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\r\n        moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\r\n        moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\r\n  }\r\n\r\n  private bottom(cube: Box, direction: string, moment: number[]) {\r\n    switch (direction) {\r\n      case directions.RED:\r\n        return (\r\n            -moment[this.getIndex(cube.r0, cube.g1, cube.b1)] +\r\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] +\r\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\r\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\r\n      case directions.GREEN:\r\n        return (\r\n            -moment[this.getIndex(cube.r1, cube.g0, cube.b1)] +\r\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\r\n            moment[this.getIndex(cube.r0, cube.g0, cube.b1)] -\r\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\r\n      case directions.BLUE:\r\n        return (\r\n            -moment[this.getIndex(cube.r1, cube.g1, cube.b0)] +\r\n            moment[this.getIndex(cube.r1, cube.g0, cube.b0)] +\r\n            moment[this.getIndex(cube.r0, cube.g1, cube.b0)] -\r\n            moment[this.getIndex(cube.r0, cube.g0, cube.b0)]);\r\n      default:\r\n        throw new Error('unexpected direction $direction');\r\n    }\r\n  }\r\n\r\n  private top(\r\n      cube: Box, direction: string, position: number, moment: number[]) {\r\n    switch (direction) {\r\n      case directions.RED:\r\n        return (\r\n            moment[this.getIndex(position, cube.g1, cube.b1)] -\r\n            moment[this.getIndex(position, cube.g1, cube.b0)] -\r\n            moment[this.getIndex(position, cube.g0, cube.b1)] +\r\n            moment[this.getIndex(position, cube.g0, cube.b0)]);\r\n      case directions.GREEN:\r\n        return (\r\n            moment[this.getIndex(cube.r1, position, cube.b1)] -\r\n            moment[this.getIndex(cube.r1, position, cube.b0)] -\r\n            moment[this.getIndex(cube.r0, position, cube.b1)] +\r\n            moment[this.getIndex(cube.r0, position, cube.b0)]);\r\n      case directions.BLUE:\r\n        return (\r\n            moment[this.getIndex(cube.r1, cube.g1, position)] -\r\n            moment[this.getIndex(cube.r1, cube.g0, position)] -\r\n            moment[this.getIndex(cube.r0, cube.g1, position)] +\r\n            moment[this.getIndex(cube.r0, cube.g0, position)]);\r\n      default:\r\n        throw new Error('unexpected direction $direction');\r\n    }\r\n  }\r\n\r\n  private getIndex(r: number, g: number, b: number): number {\r\n    return (r << (INDEX_BITS * 2)) + (r << (INDEX_BITS + 1)) + r +\r\n        (g << INDEX_BITS) + g + b;\r\n  }\r\n}\r\n\r\n/**\r\n * Keeps track of the state of each box created as the Wu  quantization\r\n * algorithm progresses through dividing the image's pixels as plotted in RGB.\r\n */\r\nclass Box {\r\n  constructor(\r\n      public r0: number = 0, public r1: number = 0, public g0: number = 0,\r\n      public g1: number = 0, public b0: number = 0, public b1: number = 0,\r\n      public vol: number = 0) {}\r\n}\r\n\r\n/**\r\n * Represents final result of Wu algorithm.\r\n */\r\nclass CreateBoxesResult {\r\n  /**\r\n   * @param requestedCount how many colors the caller asked to be returned from\r\n   *     quantization.\r\n   * @param resultCount the actual number of colors achieved from quantization.\r\n   *     May be lower than the requested count.\r\n   */\r\n  constructor(public requestedCount: number, public resultCount: number) {}\r\n}\r\n\r\n/**\r\n * Represents the result of calculating where to cut an existing box in such\r\n * a way to maximize variance between the two new boxes created by a cut.\r\n */\r\nclass MaximizeResult {\r\n  constructor(public cutLocation: number, public maximum: number) {}\r\n}\r\n"]}