{"version":3,"file":"viewing_conditions.js","sourceRoot":"","sources":["../../hct/viewing_conditions.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as utils from '../utils/color_utils';\r\nimport * as math from '../utils/math_utils';\r\n\r\n/**\r\n * In traditional color spaces, a color can be identified solely by the\r\n * observer's measurement of the color. Color appearance models such as CAM16\r\n * also use information about the environment where the color was\r\n * observed, known as the viewing conditions.\r\n *\r\n * For example, white under the traditional assumption of a midday sun white\r\n * point is accurately measured as a slightly chromatic blue by CAM16. (roughly,\r\n * hue 203, chroma 3, lightness 100)\r\n *\r\n * This class caches intermediate values of the CAM16 conversion process that\r\n * depend only on viewing conditions, enabling speed ups.\r\n */\r\nexport class ViewingConditions {\r\n  /** sRGB-like viewing conditions.  */\r\n  static DEFAULT = ViewingConditions.make();\r\n\r\n  /**\r\n   * Create ViewingConditions from a simple, physically relevant, set of\r\n   * parameters.\r\n   *\r\n   * @param whitePoint White point, measured in the XYZ color space.\r\n   *     default = D65, or sunny day afternoon\r\n   * @param adaptingLuminance The luminance of the adapting field. Informally,\r\n   *     how bright it is in the room where the color is viewed. Can be\r\n   *     calculated from lux by multiplying lux by 0.0586. default = 11.72,\r\n   *     or 200 lux.\r\n   * @param backgroundLstar The lightness of the area surrounding the color.\r\n   *     measured by L* in L*a*b*. default = 50.0\r\n   * @param surround A general description of the lighting surrounding the\r\n   *     color. 0 is pitch dark, like watching a movie in a theater. 1.0 is a\r\n   *     dimly light room, like watching TV at home at night. 2.0 means there\r\n   *     is no difference between the lighting on the color and around it.\r\n   *     default = 2.0\r\n   * @param discountingIlluminant Whether the eye accounts for the tint of the\r\n   *     ambient lighting, such as knowing an apple is still red in green light.\r\n   *     default = false, the eye does not perform this process on\r\n   *       self-luminous objects like displays.\r\n   */\r\n  static make(\r\n      whitePoint = utils.whitePointD65(),\r\n      adaptingLuminance = (200.0 / Math.PI) * utils.yFromLstar(50.0) / 100.0,\r\n      backgroundLstar = 50.0, surround = 2.0,\r\n      discountingIlluminant = false): ViewingConditions {\r\n    const xyz = whitePoint;\r\n    const rW = xyz[0] * 0.401288 + xyz[1] * 0.650173 + xyz[2] * -0.051461;\r\n    const gW = xyz[0] * -0.250268 + xyz[1] * 1.204414 + xyz[2] * 0.045854;\r\n    const bW = xyz[0] * -0.002079 + xyz[1] * 0.048952 + xyz[2] * 0.953127;\r\n    const f = 0.8 + surround / 10.0;\r\n    const c = f >= 0.9 ? math.lerp(0.59, 0.69, (f - 0.9) * 10.0) :\r\n                         math.lerp(0.525, 0.59, (f - 0.8) * 10.0);\r\n    let d = discountingIlluminant ?\r\n        1.0 :\r\n        f * (1.0 - (1.0 / 3.6) * Math.exp((-adaptingLuminance - 42.0) / 92.0));\r\n    d = d > 1.0 ? 1.0 : d < 0.0 ? 0.0 : d;\r\n    const nc = f;\r\n    const rgbD = [\r\n      d * (100.0 / rW) + 1.0 - d,\r\n      d * (100.0 / gW) + 1.0 - d,\r\n      d * (100.0 / bW) + 1.0 - d,\r\n    ];\r\n    const k = 1.0 / (5.0 * adaptingLuminance + 1.0);\r\n    const k4 = k * k * k * k;\r\n    const k4F = 1.0 - k4;\r\n    const fl = k4 * adaptingLuminance +\r\n        0.1 * k4F * k4F * Math.cbrt(5.0 * adaptingLuminance);\r\n    const n = utils.yFromLstar(backgroundLstar) / whitePoint[1];\r\n    const z = 1.48 + Math.sqrt(n);\r\n    const nbb = 0.725 / Math.pow(n, 0.2);\r\n    const ncb = nbb;\r\n    const rgbAFactors = [\r\n      Math.pow((fl * rgbD[0] * rW) / 100.0, 0.42),\r\n      Math.pow((fl * rgbD[1] * gW) / 100.0, 0.42),\r\n      Math.pow((fl * rgbD[2] * bW) / 100.0, 0.42),\r\n    ];\r\n    const rgbA = [\r\n      (400.0 * rgbAFactors[0]) / (rgbAFactors[0] + 27.13),\r\n      (400.0 * rgbAFactors[1]) / (rgbAFactors[1] + 27.13),\r\n      (400.0 * rgbAFactors[2]) / (rgbAFactors[2] + 27.13),\r\n    ];\r\n    const aw = (2.0 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]) * nbb;\r\n    return new ViewingConditions(\r\n        n, aw, nbb, ncb, c, nc, rgbD, fl, Math.pow(fl, 0.25), z);\r\n  }\r\n\r\n  /**\r\n   * Parameters are intermediate values of the CAM16 conversion process. Their\r\n   * names are shorthand for technical color science terminology, this class\r\n   * would not benefit from documenting them individually. A brief overview\r\n   * is available in the CAM16 specification, and a complete overview requires\r\n   * a color science textbook, such as Fairchild's Color Appearance Models.\r\n   */\r\n  private constructor(\r\n      public n: number, public aw: number, public nbb: number,\r\n      public ncb: number, public c: number, public nc: number,\r\n      public rgbD: number[], public fl: number, public fLRoot: number,\r\n      public z: number) {}\r\n}\r\n"]}