{"version":3,"file":"hct.js","sourceRoot":"","sources":["../../hct/hct.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH;;;;;;;;;;;;;;GAcG;AAEH,OAAO,KAAK,KAAK,MAAM,sBAAsB,CAAC;AAE9C,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAC,SAAS,EAAC,MAAM,cAAc,CAAC;AAGvC;;;;GAIG;AACH,MAAM,OAAO,GAAG;IA4Fd,YAA4B,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QACtC,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IApFD,MAAM,CAAC,IAAI,CAAC,GAAW,EAAE,MAAc,EAAE,IAAY;QACnD,OAAO,IAAI,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;;OAGG;IACH,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,IAAI,GAAG,CAAC,MAAc;QACpB,IAAI,CAAC,gBAAgB,CACjB,SAAS,CAAC,UAAU,CAChB,MAAM,EACN,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,YAAY,CAChB,CACR,CAAC;IACJ,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,IAAI,MAAM,CAAC,SAAiB;QAC1B,IAAI,CAAC,gBAAgB,CACjB,SAAS,CAAC,UAAU,CAChB,IAAI,CAAC,WAAW,EAChB,SAAS,EACT,IAAI,CAAC,YAAY,CAChB,CACR,CAAC;IACJ,CAAC;IAED,uCAAuC;IACvC,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,IAAI,IAAI,CAAC,OAAe;QACtB,IAAI,CAAC,gBAAgB,CACjB,SAAS,CAAC,UAAU,CAChB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,cAAc,EACnB,OAAO,CACN,CACR,CAAC;IACJ,CAAC;IAUO,gBAAgB,CAAC,IAAY;QACnC,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC,MAAM,CAAC;QACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * A color system built using CAM16 hue and chroma, and L* from\r\n * L*a*b*.\r\n *\r\n * Using L* creates a link between the color system, contrast, and thus\r\n * accessibility. Contrast ratio depends on relative luminance, or Y in the XYZ\r\n * color space. L*, or perceptual luminance can be calculated from Y.\r\n *\r\n * Unlike Y, L* is linear to human perception, allowing trivial creation of\r\n * accurate color tones.\r\n *\r\n * Unlike contrast ratio, measuring contrast in L* is linear, and simple to\r\n * calculate. A difference of 40 in HCT tone guarantees a contrast ratio >= 3.0,\r\n * and a difference of 50 guarantees a contrast ratio >= 4.5.\r\n */\r\n\r\nimport * as utils from '../utils/color_utils';\r\n\r\nimport {Cam16} from './cam16';\r\nimport {HctSolver} from './hct_solver';\r\n\r\n\r\n/**\r\n * HCT, hue, chroma, and tone. A color system that provides a perceptually\r\n * accurate color measurement system that can also accurately render what colors\r\n * will appear as in different lighting environments.\r\n */\r\nexport class Hct {\r\n  /**\r\n   * @param hue 0 <= hue < 360; invalid values are corrected.\r\n   * @param chroma 0 <= chroma < ?; Informally, colorfulness. The color\r\n   *     returned may be lower than the requested chroma. Chroma has a different\r\n   *     maximum for any given hue and tone.\r\n   * @param tone 0 <= tone <= 100; invalid values are corrected.\r\n   * @return HCT representation of a color in default viewing conditions.\r\n   */\r\n\r\n  internalHue: number;\r\n  internalChroma: number;\r\n  internalTone: number;\r\n\r\n  static from(hue: number, chroma: number, tone: number) {\r\n    return new Hct(HctSolver.solveToInt(hue, chroma, tone));\r\n  }\r\n\r\n  /**\r\n   * @param argb ARGB representation of a color.\r\n   * @return HCT representation of a color in default viewing conditions\r\n   */\r\n  static fromInt(argb: number) {\r\n    return new Hct(argb);\r\n  }\r\n\r\n  toInt(): number {\r\n    return this.argb;\r\n  }\r\n\r\n  /**\r\n   * A number, in degrees, representing ex. red, orange, yellow, etc.\r\n   * Ranges from 0 <= hue < 360.\r\n   */\r\n  get hue(): number {\r\n    return this.internalHue;\r\n  }\r\n\r\n  /**\r\n   * @param newHue 0 <= newHue < 360; invalid values are corrected.\r\n   * Chroma may decrease because chroma has a different maximum for any given\r\n   * hue and tone.\r\n   */\r\n  set hue(newHue: number) {\r\n    this.setInternalState(\r\n        HctSolver.solveToInt(\r\n            newHue,\r\n            this.internalChroma,\r\n            this.internalTone,\r\n            ),\r\n    );\r\n  }\r\n\r\n  get chroma(): number {\r\n    return this.internalChroma;\r\n  }\r\n\r\n  /**\r\n   * @param newChroma 0 <= newChroma < ?\r\n   * Chroma may decrease because chroma has a different maximum for any given\r\n   * hue and tone.\r\n   */\r\n  set chroma(newChroma: number) {\r\n    this.setInternalState(\r\n        HctSolver.solveToInt(\r\n            this.internalHue,\r\n            newChroma,\r\n            this.internalTone,\r\n            ),\r\n    );\r\n  }\r\n\r\n  /** Lightness. Ranges from 0 to 100. */\r\n  get tone(): number {\r\n    return this.internalTone;\r\n  }\r\n\r\n  /**\r\n   * @param newTone 0 <= newTone <= 100; invalid valids are corrected.\r\n   * Chroma may decrease because chroma has a different maximum for any given\r\n   * hue and tone.\r\n   */\r\n  set tone(newTone: number) {\r\n    this.setInternalState(\r\n        HctSolver.solveToInt(\r\n            this.internalHue,\r\n            this.internalChroma,\r\n            newTone,\r\n            ),\r\n    );\r\n  }\r\n\r\n  private constructor(private argb: number) {\r\n    const cam = Cam16.fromInt(argb);\r\n    this.internalHue = cam.hue;\r\n    this.internalChroma = cam.chroma;\r\n    this.internalTone = utils.lstarFromArgb(argb);\r\n    this.argb = argb;\r\n  }\r\n\r\n  private setInternalState(argb: number) {\r\n    const cam = Cam16.fromInt(argb);\r\n    this.internalHue = cam.hue;\r\n    this.internalChroma = cam.chroma;\r\n    this.internalTone = utils.lstarFromArgb(argb);\r\n    this.argb = argb;\r\n  }\r\n}\r\n"]}