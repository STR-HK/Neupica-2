{"version":3,"file":"hct_solver.js","sourceRoot":"","sources":["../../hct/hct_solver.ts"],"names":[],"mappings":"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IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,gBAAgB;IAC5D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,gBAAgB,EAAM,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,kBAAkB,EAAI,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,kBAAkB,EAAI,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,kBAAkB,EAAI,kBAAkB,EAAI,gBAAgB;IAC5D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,iBAAiB,EAAK,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,gBAAgB,EAAM,kBAAkB;IAC9D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,gBAAgB,EAAM,kBAAkB,EAAI,kBAAkB;IAC9D,iBAAiB,EAAK,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,iBAAiB;IAC7D,kBAAkB,EAAI,iBAAiB,EAAK,kBAAkB;IAC9D,gBAAgB,EAAM,kBAAkB,EAAI,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,gBAAgB,EAAM,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,gBAAgB,EAAM,gBAAgB;IAC5D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,iBAAiB;IAC7D,iBAAiB,EAAK,iBAAiB,EAAK,gBAAgB;IAC5D,iBAAiB,EAAK,gBAAgB,EAAM,iBAAiB;CAC9D,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// This file is automatically generated. Do not modify it.\r\n\r\nimport * as colorUtils from '../utils/color_utils';\r\nimport * as mathUtils from '../utils/math_utils';\r\n\r\nimport {Cam16} from './cam16';\r\nimport {ViewingConditions} from './viewing_conditions';\r\n\r\n\r\n// material_color_utilities is designed to have a consistent API across\r\n// platforms and modular components that can be moved around easily. Using a\r\n// class as a namespace facilitates this.\r\n//\r\n// tslint:disable:class-as-namespace\r\n/**\r\n * A class that solves the HCT equation.\r\n */\r\nexport class HctSolver {\r\n  static SCALED_DISCOUNT_FROM_LINRGB = [\r\n    [\r\n      0.001200833568784504,\r\n      0.002389694492170889,\r\n      0.0002795742885861124,\r\n    ],\r\n    [\r\n      0.0005891086651375999,\r\n      0.0029785502573438758,\r\n      0.0003270666104008398,\r\n    ],\r\n    [\r\n      0.00010146692491640572,\r\n      0.0005364214359186694,\r\n      0.0032979401770712076,\r\n    ],\r\n  ];\r\n\r\n  static LINRGB_FROM_SCALED_DISCOUNT = [\r\n    [\r\n      1373.2198709594231,\r\n      -1100.4251190754821,\r\n      -7.278681089101213,\r\n    ],\r\n    [\r\n      -271.815969077903,\r\n      559.6580465940733,\r\n      -32.46047482791194,\r\n    ],\r\n    [\r\n      1.9622899599665666,\r\n      -57.173814538844006,\r\n      308.7233197812385,\r\n    ],\r\n  ];\r\n\r\n  static Y_FROM_LINRGB = [0.2126, 0.7152, 0.0722];\r\n\r\n  static CRITICAL_PLANES = [\r\n    0.015176349177441876, 0.045529047532325624, 0.07588174588720938,\r\n    0.10623444424209313,  0.13658714259697685,  0.16693984095186062,\r\n    0.19729253930674434,  0.2276452376616281,   0.2579979360165119,\r\n    0.28835063437139563,  0.3188300904430532,   0.350925934958123,\r\n    0.3848314933096426,   0.42057480301049466,  0.458183274052838,\r\n    0.4976837250274023,   0.5391024159806381,   0.5824650784040898,\r\n    0.6277969426914107,   0.6751227633498623,   0.7244668422128921,\r\n    0.775853049866786,    0.829304845476233,    0.8848452951698498,\r\n    0.942497089126609,    1.0022825574869039,   1.0642236851973577,\r\n    1.1283421258858297,   1.1946592148522128,   1.2631959812511864,\r\n    1.3339731595349034,   1.407011200216447,    1.4823302800086415,\r\n    1.5599503113873272,   1.6398909516233677,   1.7221716113234105,\r\n    1.8068114625156377,   1.8938294463134073,   1.9832442801866852,\r\n    2.075074464868551,    2.1693382909216234,   2.2660538449872063,\r\n    2.36523901573795,     2.4669114995532007,   2.5710888059345764,\r\n    2.6777882626779785,   2.7870270208169257,   2.898822059350997,\r\n    3.0131901897720907,   3.1301480604002863,   3.2497121605402226,\r\n    3.3718988244681087,   3.4967242352587946,   3.624204428461639,\r\n    3.754355295633311,    3.887192587735158,    4.022731918402185,\r\n    4.160988767090289,    4.301978482107941,    4.445716283538092,\r\n    4.592217266055746,    4.741496401646282,    4.893568542229298,\r\n    5.048448422192488,    5.20615066083972,     5.3666897647573375,\r\n    5.5300801301023865,   5.696336044816294,    5.865471690767354,\r\n    6.037501145825082,    6.212438385869475,    6.390297286737924,\r\n    6.571091626112461,    6.7548350853498045,   6.941541251256611,\r\n    7.131223617812143,    7.323895587840543,    7.5195704746346665,\r\n    7.7182615035334345,   7.919981813454504,    8.124744458384042,\r\n    8.332562408825165,    8.543448553206703,    8.757415699253682,\r\n    8.974476575321063,    9.194643831691977,    9.417930041841839,\r\n    9.644347703669503,    9.873909240696694,    10.106627003236781,\r\n    10.342513269534024,   10.58158024687427,    10.8238400726681,\r\n    11.069304815507364,   11.317986476196008,   11.569896988756009,\r\n    11.825048221409341,   12.083451977536606,   12.345119996613247,\r\n    12.610063955123938,   12.878295467455942,   13.149826086772048,\r\n    13.42466730586372,    13.702830557985108,   13.984327217668513,\r\n    14.269168601521828,   14.55736596900856,    14.848930523210871,\r\n    15.143873411576273,   15.44220572664832,    15.743938506781891,\r\n    16.04908273684337,    16.35764934889634,    16.66964922287304,\r\n    16.985093187232053,   17.30399201960269,    17.62635644741625,\r\n    17.95219714852476,    18.281524751807332,   18.614349837764564,\r\n    18.95068293910138,    19.290534541298456,   19.633915083172692,\r\n    19.98083495742689,    20.331304511189067,   20.685334046541502,\r\n    21.042933821039977,   21.404114048223256,   21.76888489811322,\r\n    22.137256497705877,   22.50923893145328,    22.884842241736916,\r\n    23.264076429332462,   23.6469514538663,     24.033477234264016,\r\n    24.42366364919083,    24.817520537484558,   25.21505769858089,\r\n    25.61628489293138,    26.021211842414342,   26.429848230738664,\r\n    26.842203703840827,   27.258287870275353,   27.678110301598522,\r\n    28.10168053274597,    28.529008062403893,   28.96010235337422,\r\n    29.39497283293396,    29.83362889318845,    30.276079891419332,\r\n    30.722335150426627,   31.172403958865512,   31.62629557157785,\r\n    32.08401920991837,    32.54558406207592,    33.010999283389665,\r\n    33.4802739966603,     33.953417292456834,   34.430438229418264,\r\n    34.911345834551085,   35.39614910352207,    35.88485700094671,\r\n    36.37747846067349,    36.87402238606382,    37.37449765026789,\r\n    37.87891309649659,    38.38727753828926,    38.89959975977785,\r\n    39.41588851594697,    39.93615253289054,    40.460400508064545,\r\n    40.98864111053629,    41.520882981230194,   42.05713473317016,\r\n    42.597404951718396,   43.141702194811224,   43.6900349931913,\r\n    44.24241185063697,    44.798841244188324,   45.35933162437017,\r\n    45.92389141541209,    46.49252901546552,    47.065252796817916,\r\n    47.64207110610409,    48.22299226451468,    48.808024568002054,\r\n    49.3971762874833,     49.9904556690408,     50.587870934119984,\r\n    51.189430279724725,   51.79514187861014,    52.40501387947288,\r\n    53.0190544071392,     53.637271562750364,   54.259673423945976,\r\n    54.88626804504493,    55.517063457223934,   56.15206766869424,\r\n    56.79128866487574,    57.43473440856916,    58.08241284012621,\r\n    58.734331877617365,   59.39049941699807,    60.05092333227251,\r\n    60.715611475655585,   61.38457167773311,    62.057811747619894,\r\n    62.7353394731159,     63.417162620860914,   64.10328893648692,\r\n    64.79372614476921,    65.48848194977529,    66.18756403501224,\r\n    66.89098006357258,    67.59873767827808,    68.31084450182222,\r\n    69.02730813691093,    69.74813616640164,    70.47333615344107,\r\n    71.20291564160104,    71.93688215501312,    72.67524319850172,\r\n    73.41800625771542,    74.16517879925733,    74.9167682708136,\r\n    75.67278210128072,    76.43322770089146,    77.1981124613393,\r\n    77.96744375590167,    78.74122893956174,    79.51947534912904,\r\n    80.30219030335869,    81.08938110306934,    81.88105503125999,\r\n    82.67721935322541,    83.4778813166706,     84.28304815182372,\r\n    85.09272707154808,    85.90692527145302,    86.72564993000343,\r\n    87.54890820862819,    88.3767072518277,     89.2090541872801,\r\n    90.04595612594655,    90.88742016217518,    91.73345337380438,\r\n    92.58406282226491,    93.43925555268066,    94.29903859396902,\r\n    95.16341895893969,    96.03240364439274,    96.9059996312159,\r\n    97.78421388448044,    98.6670533535366,     99.55452497210776,\r\n  ];\r\n\r\n  /**\r\n   * Sanitizes a small enough angle in radians.\r\n   *\r\n   * @param angle An angle in radians; must not deviate too much\r\n   * from 0.\r\n   * @return A coterminal angle between 0 and 2pi.\r\n   */\r\n  private static sanitizeRadians(angle: number): number {\r\n    return (angle + Math.PI * 8) % (Math.PI * 2);\r\n  }\r\n\r\n  /**\r\n   * Delinearizes an RGB component, returning a floating-point\r\n   * number.\r\n   *\r\n   * @param rgbComponent 0.0 <= rgb_component <= 100.0, represents\r\n   * linear R/G/B channel\r\n   * @return 0.0 <= output <= 255.0, color channel converted to\r\n   * regular RGB space\r\n   */\r\n  private static trueDelinearized(rgbComponent: number): number {\r\n    const normalized = rgbComponent / 100.0;\r\n    let delinearized = 0.0;\r\n    if (normalized <= 0.0031308) {\r\n      delinearized = normalized * 12.92;\r\n    } else {\r\n      delinearized = 1.055 * Math.pow(normalized, 1.0 / 2.4) - 0.055;\r\n    }\r\n    return delinearized * 255.0;\r\n  }\r\n\r\n  private static chromaticAdaptation(component: number): number {\r\n    const af = Math.pow(Math.abs(component), 0.42);\r\n    return mathUtils.signum(component) * 400.0 * af / (af + 27.13);\r\n  }\r\n\r\n  /**\r\n   * Returns the hue of a linear RGB color in CAM16.\r\n   *\r\n   * @param linrgb The linear RGB coordinates of a color.\r\n   * @return The hue of the color in CAM16, in radians.\r\n   */\r\n  private static hueOf(linrgb: number[]): number {\r\n    const scaledDiscount =\r\n        mathUtils.matrixMultiply(linrgb, HctSolver.SCALED_DISCOUNT_FROM_LINRGB);\r\n    const rA = HctSolver.chromaticAdaptation(scaledDiscount[0]);\r\n    const gA = HctSolver.chromaticAdaptation(scaledDiscount[1]);\r\n    const bA = HctSolver.chromaticAdaptation(scaledDiscount[2]);\r\n    // redness-greenness\r\n    const a = (11.0 * rA + -12.0 * gA + bA) / 11.0;\r\n    // yellowness-blueness\r\n    const b = (rA + gA - 2.0 * bA) / 9.0;\r\n    return Math.atan2(b, a);\r\n  }\r\n\r\n  private static areInCyclicOrder(a: number, b: number, c: number): boolean {\r\n    const deltaAB = HctSolver.sanitizeRadians(b - a);\r\n    const deltaAC = HctSolver.sanitizeRadians(c - a);\r\n    return deltaAB < deltaAC;\r\n  }\r\n\r\n  /**\r\n   * Solves the lerp equation.\r\n   *\r\n   * @param source The starting number.\r\n   * @param mid The number in the middle.\r\n   * @param target The ending number.\r\n   * @return A number t such that lerp(source, target, t) = mid.\r\n   */\r\n  private static intercept(source: number, mid: number, target: number):\r\n      number {\r\n    return (mid - source) / (target - source);\r\n  }\r\n\r\n  private static lerpPoint(source: number[], t: number, target: number[]):\r\n      number[] {\r\n    return [\r\n      source[0] + (target[0] - source[0]) * t,\r\n      source[1] + (target[1] - source[1]) * t,\r\n      source[2] + (target[2] - source[2]) * t,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Intersects a segment with a plane.\r\n   *\r\n   * @param source The coordinates of point A.\r\n   * @param coordinate The R-, G-, or B-coordinate of the plane.\r\n   * @param target The coordinates of point B.\r\n   * @param axis The axis the plane is perpendicular with. (0: R, 1:\r\n   * G, 2: B)\r\n   * @return The intersection point of the segment AB with the plane\r\n   * R=coordinate, G=coordinate, or B=coordinate\r\n   */\r\n  private static setCoordinate(\r\n      source: number[],\r\n      coordinate: number,\r\n      target: number[],\r\n      axis: number,\r\n      ): number[] {\r\n    const t = HctSolver.intercept(source[axis], coordinate, target[axis]);\r\n    return HctSolver.lerpPoint(source, t, target);\r\n  }\r\n\r\n  private static isBounded(x: number): boolean {\r\n    return 0.0 <= x && x <= 100.0;\r\n  }\r\n\r\n  /**\r\n   * Returns the nth possible vertex of the polygonal intersection.\r\n   *\r\n   * @param y The Y value of the plane.\r\n   * @param n The zero-based index of the point. 0 <= n <= 11.\r\n   * @return The nth possible vertex of the polygonal intersection\r\n   * of the y plane and the RGB cube, in linear RGB coordinates, if\r\n   * it exists. If this possible vertex lies outside of the cube,\r\n   * [-1.0, -1.0, -1.0] is returned.\r\n   */\r\n  private static nthVertex(y: number, n: number): number[] {\r\n    const kR = HctSolver.Y_FROM_LINRGB[0];\r\n    const kG = HctSolver.Y_FROM_LINRGB[1];\r\n    const kB = HctSolver.Y_FROM_LINRGB[2];\r\n    const coordA = n % 4 <= 1 ? 0.0 : 100.0;\r\n    const coordB = n % 2 === 0 ? 0.0 : 100.0;\r\n    if (n < 4) {\r\n      const g = coordA;\r\n      const b = coordB;\r\n      const r = (y - g * kG - b * kB) / kR;\r\n      if (HctSolver.isBounded(r)) {\r\n        return [r, g, b];\r\n      } else {\r\n        return [-1.0, -1.0, -1.0];\r\n      }\r\n    } else if (n < 8) {\r\n      const b = coordA;\r\n      const r = coordB;\r\n      const g = (y - r * kR - b * kB) / kG;\r\n      if (HctSolver.isBounded(g)) {\r\n        return [r, g, b];\r\n      } else {\r\n        return [-1.0, -1.0, -1.0];\r\n      }\r\n    } else {\r\n      const r = coordA;\r\n      const g = coordB;\r\n      const b = (y - r * kR - g * kG) / kB;\r\n      if (HctSolver.isBounded(b)) {\r\n        return [r, g, b];\r\n      } else {\r\n        return [-1.0, -1.0, -1.0];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the segment containing the desired color.\r\n   *\r\n   * @param y The Y value of the color.\r\n   * @param targetHue The hue of the color.\r\n   * @return A list of two sets of linear RGB coordinates, each\r\n   * corresponding to an endpoint of the segment containing the\r\n   * desired color.\r\n   */\r\n  private static bisectToSegment(y: number, targetHue: number): number[][] {\r\n    let left = [-1.0, -1.0, -1.0];\r\n    let right = left;\r\n    let leftHue = 0.0;\r\n    let rightHue = 0.0;\r\n    let initialized = false;\r\n    let uncut = true;\r\n    for (let n = 0; n < 12; n++) {\r\n      const mid = HctSolver.nthVertex(y, n);\r\n      if (mid[0] < 0) {\r\n        continue;\r\n      }\r\n      const midHue = HctSolver.hueOf(mid);\r\n      if (!initialized) {\r\n        left = mid;\r\n        right = mid;\r\n        leftHue = midHue;\r\n        rightHue = midHue;\r\n        initialized = true;\r\n        continue;\r\n      }\r\n      if (uncut || HctSolver.areInCyclicOrder(leftHue, midHue, rightHue)) {\r\n        uncut = false;\r\n        if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\r\n          right = mid;\r\n          rightHue = midHue;\r\n        } else {\r\n          left = mid;\r\n          leftHue = midHue;\r\n        }\r\n      }\r\n    }\r\n    return [left, right];\r\n  }\r\n\r\n  private static midpoint(a: number[], b: number[]): number[] {\r\n    return [\r\n      (a[0] + b[0]) / 2,\r\n      (a[1] + b[1]) / 2,\r\n      (a[2] + b[2]) / 2,\r\n    ];\r\n  }\r\n\r\n  private static criticalPlaneBelow(x: number): number {\r\n    return Math.floor(x - 0.5);\r\n  }\r\n\r\n  private static criticalPlaneAbove(x: number): number {\r\n    return Math.ceil(x - 0.5);\r\n  }\r\n\r\n  /**\r\n   * Finds a color with the given Y and hue on the boundary of the\r\n   * cube.\r\n   *\r\n   * @param y The Y value of the color.\r\n   * @param targetHue The hue of the color.\r\n   * @return The desired color, in linear RGB coordinates.\r\n   */\r\n  private static bisectToLimit(y: number, targetHue: number): number[] {\r\n    const segment = HctSolver.bisectToSegment(y, targetHue);\r\n    let left = segment[0];\r\n    let leftHue = HctSolver.hueOf(left);\r\n    let right = segment[1];\r\n    for (let axis = 0; axis < 3; axis++) {\r\n      if (left[axis] !== right[axis]) {\r\n        let lPlane = -1;\r\n        let rPlane = 255;\r\n        if (left[axis] < right[axis]) {\r\n          lPlane = HctSolver.criticalPlaneBelow(\r\n              HctSolver.trueDelinearized(left[axis]));\r\n          rPlane = HctSolver.criticalPlaneAbove(\r\n              HctSolver.trueDelinearized(right[axis]));\r\n        } else {\r\n          lPlane = HctSolver.criticalPlaneAbove(\r\n              HctSolver.trueDelinearized(left[axis]));\r\n          rPlane = HctSolver.criticalPlaneBelow(\r\n              HctSolver.trueDelinearized(right[axis]));\r\n        }\r\n        for (let i = 0; i < 8; i++) {\r\n          if (Math.abs(rPlane - lPlane) <= 1) {\r\n            break;\r\n          } else {\r\n            const mPlane = Math.floor((lPlane + rPlane) / 2.0);\r\n            const midPlaneCoordinate = HctSolver.CRITICAL_PLANES[mPlane];\r\n            const mid =\r\n                HctSolver.setCoordinate(left, midPlaneCoordinate, right, axis);\r\n            const midHue = HctSolver.hueOf(mid);\r\n            if (HctSolver.areInCyclicOrder(leftHue, targetHue, midHue)) {\r\n              right = mid;\r\n              rPlane = mPlane;\r\n            } else {\r\n              left = mid;\r\n              leftHue = midHue;\r\n              lPlane = mPlane;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return HctSolver.midpoint(left, right);\r\n  }\r\n\r\n  private static inverseChromaticAdaptation(adapted: number): number {\r\n    const adaptedAbs = Math.abs(adapted);\r\n    const base = Math.max(0, 27.13 * adaptedAbs / (400.0 - adaptedAbs));\r\n    return mathUtils.signum(adapted) * Math.pow(base, 1.0 / 0.42);\r\n  }\r\n\r\n  /**\r\n   * Finds a color with the given hue, chroma, and Y.\r\n   *\r\n   * @param hueRadians The desired hue in radians.\r\n   * @param chroma The desired chroma.\r\n   * @param y The desired Y.\r\n   * @return The desired color as a hexadecimal integer, if found; 0\r\n   * otherwise.\r\n   */\r\n  private static findResultByJ(hueRadians: number, chroma: number, y: number):\r\n      number {\r\n    // Initial estimate of j.\r\n    let j = Math.sqrt(y) * 11.0;\r\n    // ===========================================================\r\n    // Operations inlined from Cam16 to avoid repeated calculation\r\n    // ===========================================================\r\n    const viewingConditions = ViewingConditions.DEFAULT;\r\n    const tInnerCoeff =\r\n        1 / Math.pow(1.64 - Math.pow(0.29, viewingConditions.n), 0.73);\r\n    const eHue = 0.25 * (Math.cos(hueRadians + 2.0) + 3.8);\r\n    const p1 =\r\n        eHue * (50000.0 / 13.0) * viewingConditions.nc * viewingConditions.ncb;\r\n    const hSin = Math.sin(hueRadians);\r\n    const hCos = Math.cos(hueRadians);\r\n    for (let iterationRound = 0; iterationRound < 5; iterationRound++) {\r\n      // ===========================================================\r\n      // Operations inlined from Cam16 to avoid repeated calculation\r\n      // ===========================================================\r\n      const jNormalized = j / 100.0;\r\n      const alpha =\r\n          chroma === 0.0 || j === 0.0 ? 0.0 : chroma / Math.sqrt(jNormalized);\r\n      const t = Math.pow(alpha * tInnerCoeff, 1.0 / 0.9);\r\n      const ac = viewingConditions.aw *\r\n          Math.pow(\r\n              jNormalized,\r\n              1.0 / viewingConditions.c / viewingConditions.z,\r\n          );\r\n      const p2 = ac / viewingConditions.nbb;\r\n      const gamma = 23.0 * (p2 + 0.305) * t /\r\n          (23.0 * p1 + 11 * t * hCos + 108.0 * t * hSin);\r\n      const a = gamma * hCos;\r\n      const b = gamma * hSin;\r\n      const rA = (460.0 * p2 + 451.0 * a + 288.0 * b) / 1403.0;\r\n      const gA = (460.0 * p2 - 891.0 * a - 261.0 * b) / 1403.0;\r\n      const bA = (460.0 * p2 - 220.0 * a - 6300.0 * b) / 1403.0;\r\n      const rCScaled = HctSolver.inverseChromaticAdaptation(rA);\r\n      const gCScaled = HctSolver.inverseChromaticAdaptation(gA);\r\n      const bCScaled = HctSolver.inverseChromaticAdaptation(bA);\r\n      const linrgb = mathUtils.matrixMultiply(\r\n          [rCScaled, gCScaled, bCScaled],\r\n          HctSolver.LINRGB_FROM_SCALED_DISCOUNT,\r\n      );\r\n      // ===========================================================\r\n      // Operations inlined from Cam16 to avoid repeated calculation\r\n      // ===========================================================\r\n      if (linrgb[0] < 0 || linrgb[1] < 0 || linrgb[2] < 0) {\r\n        return 0;\r\n      }\r\n      const kR = HctSolver.Y_FROM_LINRGB[0];\r\n      const kG = HctSolver.Y_FROM_LINRGB[1];\r\n      const kB = HctSolver.Y_FROM_LINRGB[2];\r\n      const fnj = kR * linrgb[0] + kG * linrgb[1] + kB * linrgb[2];\r\n      if (fnj <= 0) {\r\n        return 0;\r\n      }\r\n      if (iterationRound === 4 || Math.abs(fnj - y) < 0.002) {\r\n        if (linrgb[0] > 100.01 || linrgb[1] > 100.01 || linrgb[2] > 100.01) {\r\n          return 0;\r\n        }\r\n        return colorUtils.argbFromLinrgb(linrgb);\r\n      }\r\n      // Iterates with Newton method,\r\n      // Using 2 * fn(j) / j as the approximation of fn'(j)\r\n      j = j - (fnj - y) * j / (2 * fnj);\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Finds an sRGB color with the given hue, chroma, and L*, if\r\n   * possible.\r\n   *\r\n   * @param hueDegrees The desired hue, in degrees.\r\n   * @param chroma The desired chroma.\r\n   * @param lstar The desired L*.\r\n   * @return A hexadecimal representing the sRGB color. The color\r\n   * has sufficiently close hue, chroma, and L* to the desired\r\n   * values, if possible; otherwise, the hue and L* will be\r\n   * sufficiently close, and chroma will be maximized.\r\n   */\r\n  static solveToInt(hueDegrees: number, chroma: number, lstar: number): number {\r\n    if (chroma < 0.0001 || lstar < 0.0001 || lstar > 99.9999) {\r\n      return colorUtils.argbFromLstar(lstar);\r\n    }\r\n    hueDegrees = mathUtils.sanitizeDegreesDouble(hueDegrees);\r\n    const hueRadians = hueDegrees / 180 * Math.PI;\r\n    const y = colorUtils.yFromLstar(lstar);\r\n    const exactAnswer = HctSolver.findResultByJ(hueRadians, chroma, y);\r\n    if (exactAnswer !== 0) {\r\n      return exactAnswer;\r\n    }\r\n    const linrgb = HctSolver.bisectToLimit(y, hueRadians);\r\n    return colorUtils.argbFromLinrgb(linrgb);\r\n  }\r\n\r\n  /**\r\n   * Finds an sRGB color with the given hue, chroma, and L*, if\r\n   * possible.\r\n   *\r\n   * @param hueDegrees The desired hue, in degrees.\r\n   * @param chroma The desired chroma.\r\n   * @param lstar The desired L*.\r\n   * @return An CAM16 object representing the sRGB color. The color\r\n   * has sufficiently close hue, chroma, and L* to the desired\r\n   * values, if possible; otherwise, the hue and L* will be\r\n   * sufficiently close, and chroma will be maximized.\r\n   */\r\n  static solveToCam(hueDegrees: number, chroma: number, lstar: number): Cam16 {\r\n    return Cam16.fromInt(HctSolver.solveToInt(hueDegrees, chroma, lstar));\r\n  }\r\n}\r\n"]}