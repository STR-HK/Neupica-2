{"version":3,"file":"blend.js","sourceRoot":"","sources":["../../blend/blend.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,0DAA0D;AAE1D,OAAO,EAAC,KAAK,EAAC,MAAM,cAAc,CAAC;AACnC,OAAO,EAAC,GAAG,EAAC,MAAM,YAAY,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AACnD,OAAO,KAAK,SAAS,MAAM,qBAAqB,CAAC;AAEjD,uEAAuE;AACvE,4EAA4E;AAC5E,yCAAyC;AACzC,EAAE;AACF,oCAAoC;AAEpC;;GAEG;AACH,MAAM,OAAO,KAAK;IAChB;;;;;;;;;;OAUG;IACH,MAAM,CAAC,SAAS,CAAC,WAAmB,EAAE,WAAmB;QACvD,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACvC,MAAM,iBAAiB,GACnB,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QACxD,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,iBAAiB,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC;QAChE,MAAM,SAAS,GAAG,SAAS,CAAC,qBAAqB,CAC7C,OAAO,CAAC,GAAG;YACX,eAAe,GAAG,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3E,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IACnE,CAAC;IAED;;;;;;;;;OASG;IACH,MAAM,CAAC,MAAM,CAAC,IAAY,EAAE,EAAU,EAAE,MAAc;QACpD,MAAM,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CACpB,MAAM,CAAC,GAAG,EACV,OAAO,CAAC,MAAM,EACd,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CACjC,CAAC;QACF,OAAO,OAAO,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED;;;;;;;;OAQG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAY,EAAE,EAAU,EAAE,MAAc;QACtD,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;QACxB,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;QACxB,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC;QACxB,MAAM,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC;QAC7C,MAAM,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC;QAC7C,MAAM,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC;QAC7C,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC;IACpD,CAAC;CACF","sourcesContent":["/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n// This file is automatically generated. Do not modify it.\r\n\r\nimport {Cam16} from '../hct/cam16';\r\nimport {Hct} from '../hct/hct';\r\nimport * as colorUtils from '../utils/color_utils';\r\nimport * as mathUtils from '../utils/math_utils';\r\n\r\n// material_color_utilities is designed to have a consistent API across\r\n// platforms and modular components that can be moved around easily. Using a\r\n// class as a namespace facilitates this.\r\n//\r\n// tslint:disable:class-as-namespace\r\n\r\n/**\r\n * Functions for blending in HCT and CAM16.\r\n */\r\nexport class Blend {\r\n  /**\r\n   * Blend the design color's HCT hue towards the key color's HCT\r\n   * hue, in a way that leaves the original color recognizable and\r\n   * recognizably shifted towards the key color.\r\n   *\r\n   * @param designColor ARGB representation of an arbitrary color.\r\n   * @param sourceColor ARGB representation of the main theme color.\r\n   * @return The design color with a hue shifted towards the\r\n   * system's color, a slightly warmer/cooler variant of the design\r\n   * color's hue.\r\n   */\r\n  static harmonize(designColor: number, sourceColor: number): number {\r\n    const fromHct = Hct.fromInt(designColor);\r\n    const toHct = Hct.fromInt(sourceColor);\r\n    const differenceDegrees =\r\n        mathUtils.differenceDegrees(fromHct.hue, toHct.hue);\r\n    const rotationDegrees = Math.min(differenceDegrees * 0.5, 15.0);\r\n    const outputHue = mathUtils.sanitizeDegreesDouble(\r\n        fromHct.hue +\r\n        rotationDegrees * mathUtils.rotationDirection(fromHct.hue, toHct.hue));\r\n    return Hct.from(outputHue, fromHct.chroma, fromHct.tone).toInt();\r\n  }\r\n\r\n  /**\r\n   * Blends hue from one color into another. The chroma and tone of\r\n   * the original color are maintained.\r\n   *\r\n   * @param from ARGB representation of color\r\n   * @param to ARGB representation of color\r\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\r\n   * @return from, with a hue blended towards to. Chroma and tone\r\n   * are constant.\r\n   */\r\n  static hctHue(from: number, to: number, amount: number): number {\r\n    const ucs = Blend.cam16Ucs(from, to, amount);\r\n    const ucsCam = Cam16.fromInt(ucs);\r\n    const fromCam = Cam16.fromInt(from);\r\n    const blended = Hct.from(\r\n        ucsCam.hue,\r\n        fromCam.chroma,\r\n        colorUtils.lstarFromArgb(from),\r\n    );\r\n    return blended.toInt();\r\n  }\r\n\r\n  /**\r\n   * Blend in CAM16-UCS space.\r\n   *\r\n   * @param from ARGB representation of color\r\n   * @param to ARGB representation of color\r\n   * @param amount how much blending to perform; 0.0 >= and <= 1.0\r\n   * @return from, blended towards to. Hue, chroma, and tone will\r\n   * change.\r\n   */\r\n  static cam16Ucs(from: number, to: number, amount: number): number {\r\n    const fromCam = Cam16.fromInt(from);\r\n    const toCam = Cam16.fromInt(to);\r\n    const fromJ = fromCam.jstar;\r\n    const fromA = fromCam.astar;\r\n    const fromB = fromCam.bstar;\r\n    const toJ = toCam.jstar;\r\n    const toA = toCam.astar;\r\n    const toB = toCam.bstar;\r\n    const jstar = fromJ + (toJ - fromJ) * amount;\r\n    const astar = fromA + (toA - fromA) * amount;\r\n    const bstar = fromB + (toB - fromB) * amount;\r\n    return Cam16.fromUcs(jstar, astar, bstar).toInt();\r\n  }\r\n}\r\n"]}