{"version":3,"file":"Transition.js","sourceRoot":"","sources":["Transition.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,eAAe,CAAA;AACjC,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAA;AAEvC,IAAI,KAAK,GAAG,iBAAiB,CAAC;AAE9B,MAAM,UAAU,OAAO,CAAC,OAAe,EAAE,UAAkB;IACvD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAClC,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE;YACtD,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACpB,IAAI,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;gBACzB,UAAU,CAAC,GAAG,CAAC,GAAG;oBACd,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;oBAC1B,QAAQ,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG;iBACjD,CAAA;aACJ;iBAAM;gBACH,UAAU,CAAC,GAAG,CAAC,GAAG;oBACd,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;oBAC1B,KAAK;iBACR,CAAA;aACJ;SACJ;IACL,CAAC,CAAC,CAAA;IACF,KAAK,CAAC;QACF,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,GAAG,UAAU;QACb,MAAM,EAAE,QAAQ;QAChB,QAAQ,EAAE,GAAG;KAChB,CAAC,CAAA;AACN,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,OAAe,EAAE,UAAkB,EAAE,QAAgB;IAC1E,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAClC,IAAI,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QAC3B,IAAI,OAAO,KAAK,IAAI,QAAQ,IAAI,OAAO,KAAK,IAAI,QAAQ,EAAE;YACtD,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACpB,IAAI,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;gBACzB,UAAU,CAAC,GAAG,CAAC,GAAG;oBACd,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;oBAC1B,QAAQ,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG;iBACjD,CAAA;aACJ;iBAAM;gBACH,UAAU,CAAC,GAAG,CAAC,GAAG;oBACd,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;oBAC1B,KAAK;iBACR,CAAA;aACJ;SACJ;IACL,CAAC,CAAC,CAAA;IACF,KAAK,CAAC;QACF,OAAO,EAAE,OAAO,CAAC,OAAO;QACxB,GAAG,UAAU;QACb,MAAM,EAAE,QAAQ;QAChB,QAAQ,EAAE,QAAQ;KACrB,CAAC,CAAA;AACN,CAAC","sourcesContent":["import { Native } from \"../../../../Native/Native\"\r\nimport anime from \"./anime.es.js\"\r\nimport { hexToRgba } from \"../Color.js\"\r\n\r\nlet regex = /[0-9A-Fa-f]{6}/g;\r\n\r\nexport function transit(element: Native, attributes: Object) {\r\n    Object.keys(attributes).forEach(key => {\r\n        let value = attributes[key]\r\n        if (typeof value == 'string' || typeof value == 'number') {\r\n            if (value.match(regex)) {\r\n                let ra = hexToRgba(value)\r\n                attributes[key] = [\r\n                    element.element.style[key],\r\n                    `rgba(${ra[0]}, ${ra[1]}, ${ra[2]}, ${ra[3]})`,\r\n                ]\r\n            } else {\r\n                attributes[key] = [\r\n                    element.element.style[key],\r\n                    value,\r\n                ]\r\n            }\r\n        }\r\n    })\r\n    anime({\r\n        targets: element.element,\r\n        ...attributes,\r\n        easing: 'linear',\r\n        duration: 500,\r\n    })\r\n}\r\n\r\nexport function dtransit(element: Native, attributes: Object, duration: number) {\r\n    Object.keys(attributes).forEach(key => {\r\n        let value = attributes[key]\r\n        if (typeof value == 'string' || typeof value == 'number') {\r\n            if (value.match(regex)) {\r\n                let ra = hexToRgba(value)\r\n                attributes[key] = [\r\n                    element.element.style[key],\r\n                    `rgba(${ra[0]}, ${ra[1]}, ${ra[2]}, ${ra[3]})`,\r\n                ]\r\n            } else {\r\n                attributes[key] = [\r\n                    element.element.style[key],\r\n                    value,\r\n                ]\r\n            }\r\n        }\r\n    })\r\n    anime({\r\n        targets: element.element,\r\n        ...attributes,\r\n        easing: 'linear',\r\n        duration: duration,\r\n    })\r\n}"]}